<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">

   <!--
   Unattended setup: The following variables can be set:
   -  INSTALLDIR: Full path to the installation directory
   -  ETHEREUM_ADDRESS: The address to send rewards to
   -->

   <!--
      ====================================================================================
      Defines & Variables
   -->

   <!-- Full version number to display -->
   <?define VersionNumber="1.0.0" ?>
   <!-- <?define VersionNumber="!(bind.FileVersion.videominerExe)" ?> -->

   <!--
   Upgrade code HAS to be the same for all updates.
   Once you've chosen it don't change it.
   -->
   <?define UpgradeCode="7D00DE10-262C-434A-B847-85A48749C379" ?>

   <!-- The URL for add/remove programs -->
   <?define InfoURL="https://www.video-miner.xyz" ?>
   <?define serviceBinaryName="nssm-x64-2.24.exe" ?>
   <?define serviceBinaryPath="$(var.ProjectDir)\core\nssm\$(var.serviceBinaryName)" ?>
   <?define videominerExeName = "videominer.exe" ?>
   <?define videominerExeSourcePath = "$(var.ProjectDir)\..\releases\videominer.exe" ?>
   <?define patchExeSourcePath = "$(var.ProjectDir)\..\releases\ApplyPatch.exe" ?>
   <!-- 32-bit / 64-bit variables -->
   <?if $(var.Platform) = x64 ?>
      <?define Win64 = "yes" ?>
      <?define PlatformProgramFilesFolder = "ProgramFiles64Folder" ?>
      <!-- videominer\x64\Release\videominer.exe" ?> -->
   <?else?>
      <?define Win64 = "no" ?>
      <?define PlatformProgramFilesFolder = "ProgramFilesFolder" ?>
      <!-- <?define videominerExeSourcePath = "$(var.ProjectDir)..\videominer\Win32\Release\videominer.exe" ?> -->
   <?endif?>

   <!--
      ====================================================================================
      Package start
   -->

   <!-- The upgrade code must never change as long as the product lives! -->
   <!-- Product IDs must be autogenerated (*) or else major upgrades will not work -->
   <Package Name="!(loc.ApplicationName)" Language="!(loc.Language)" Version="$(var.VersionNumber)" Manufacturer="!(loc.ManufacturerFullName)" UpgradeCode="$(var.UpgradeCode)" InstallerVersion="400"><!-- Package IDs are valid for a single package version only - they are autogenerated by WiX -->
      <!-- Let's require Windows Installer 4.0 (included in Vista) -->
      <!-- And ALWAYS install per machine!!! -->
      <SummaryInformation Description="!(loc.ProductDescription)" />

      <!-- License agreement text: dummy. Real text is set in WXS file -->
      <WixVariable Id="WixUILicenseRtf" Value="dummy" />
      
      <!-- UI customization https://wixtoolset.org/docs/v3/wixui/wixui_customizations/#replacing-the-default-bitmaps -->
      <WixVariable Id="WixUIBannerBmp" Value="$(var.ProjectDir)\images\vm_banner_top.bmp" />
      <WixVariable Id="WixUIDialogBmp" Value="$(var.ProjectDir)\images\vm_dialog.bmp" />

      <!-- Define icons (ID should not be longer than 18 chars and must end with ".exe") -->
      <Icon Id="Icon.exe" SourceFile="$(var.ProjectDir)\images\app.ico" />

      <!-- Set properties for add/remove programs -->
      <Property Id="ARPPRODUCTICON" Value="Icon.exe" />
      <Property Id="ARPHELPLINK" Value="$(var.InfoURL)" />
      <Property Id="ARPNOREPAIR" Value="yes" Secure="yes" />      <!-- Remove repair -->
      <Property Id="ARPNOMODIFY" Value="yes" Secure="yes" />      <!-- Remove modify -->
      <Property Id="WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT" Value="!(loc.ExitDlgShowLogsChkBx)" />

      <!-- Upgrade logic -->
      <!-- AllowSameVersionUpgrades -> Always upgrade, never allow two versions to be installed next to each other -->
      <!-- AllowSameVersionUpgrades causes ICE61 which must be ignored -->
      <MajorUpgrade DowngradeErrorMessage="!(loc.NewerInstalled)" AllowSameVersionUpgrades="yes" />
      
      <!-- This is the main installer sequence run when the product is actually installed -->
      <InstallExecuteSequence>
      
         <!-- Determine the install location after the install path has been validated by the installer -->
         <Custom Action="SetARPINSTALLLOCATION" After="InstallValidate"></Custom>
         <!-- <Custom Action="EXECUTE_AFTER_FINALIZE" After="InstallFinalize">NOT Installed</Custom> -->

      </InstallExecuteSequence>

      <!-- Set up ARPINSTALLLOCATION property (http://blogs.technet.com/b/alexshev/archive/2008/02/09/from-msi-to-wix-part-2.aspx) -->
      <CustomAction Id="SetARPINSTALLLOCATION" Property="ARPINSTALLLOCATION" Value="[INSTALLDIR]" />

      <!-- 
         Launch conditions
         
         1. Check minimum OS version 
            If not, the installation is aborted.
            By doing the (Installed OR ...) property means that this condition will only be evaluated if the app is being installed and not on uninstall or changing
         
            Note: Under a Product element, a condition becomes a LaunchCondition entry. 

            https://learn.microsoft.com/en-us/windows/win32/msi/operating-system-property-values
      -->
      <Launch Condition="Installed OR (VersionNT &gt;= 600)" Message="!(loc.OS2Old)" />

      <!-- 
         2. Check OS bitness
            Unfortunately 32-bit MSI packages cannot write to 64-bit ProgramFiles directory. That is the only reason we need separate MSIs for 32-bit and 64-bit.
      -->
      <?if $(var.Platform) = x64 ?>
         <Launch Condition="VersionNT64" Message="!(loc.x86VersionRequired)" />
      <?endif?>
      <?if $(var.Platform) = x86 ?>
         <Launch Condition="NOT VersionNT64" Message="!(loc.x64VersionRequired)" />
      <?endif?>
      <!-- 
         Launch conditions end
      -->
      
      <!-- Save the command line value INSTALLDIR and restore it later in the sequence or it will be overwritten by the value saved to the registry during an upgrade -->
      <!-- http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/ -->
      <CustomAction Id="SaveCmdLineValueINSTALLDIR" Property="CMDLINE_INSTALLDIR" Value="[INSTALLDIR]" Execute="firstSequence" />
      <CustomAction Id="SetFromCmdLineValueINSTALLDIR" Property="INSTALLDIR" Value="[CMDLINE_INSTALLDIR]" Execute="firstSequence" />
      <InstallUISequence>
         <Custom Action="SaveCmdLineValueINSTALLDIR" Before="AppSearch" />
         <Custom Action="SetFromCmdLineValueINSTALLDIR" After="AppSearch" Condition="CMDLINE_INSTALLDIR" />
      </InstallUISequence>
      <InstallExecuteSequence>
         <Custom Action="SaveCmdLineValueINSTALLDIR" Before="AppSearch" />
         <Custom Action="SetFromCmdLineValueINSTALLDIR" After="AppSearch" Condition="CMDLINE_INSTALLDIR" />
      </InstallExecuteSequence>

       <!-- Save the command line value ETHEREUM_ADDRESS and restore it later in the sequence or it will be overwritten by the value saved to the registry during an upgrade -->
       <!-- http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/ -->
       <CustomAction Id="SaveCmdLineValueETHEREUM_ADDRESS" Property="CMDLINE_ETHEREUM_ADDRESS" Value="[ETHEREUM_ADDRESS]" Execute="firstSequence" />
       <CustomAction Id="SetFromCmdLineValueETHEREUM_ADDRESS" Property="ETHEREUM_ADDRESS" Value="[CMDLINE_ETHEREUM_ADDRESS]" Execute="firstSequence" />
       <InstallUISequence>
           <Custom Action="SaveCmdLineValueETHEREUM_ADDRESS" Before="AppSearch" />
           <Custom Action="SetFromCmdLineValueETHEREUM_ADDRESS" After="AppSearch" Condition="CMDLINE_ETHEREUM_ADDRESS" />
       </InstallUISequence>
       <InstallExecuteSequence>
           <Custom Action="SaveCmdLineValueETHEREUM_ADDRESS" Before="AppSearch" />
           <Custom Action="SetFromCmdLineValueETHEREUM_ADDRESS" After="AppSearch" Condition="CMDLINE_ETHEREUM_ADDRESS" />
       </InstallExecuteSequence>

       <!-- Save the command line value AUTH_TOKEN and restore it later in the sequence or it will be overwritten by the value saved to the registry during an upgrade -->
       <!-- http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/ -->
       <CustomAction Id="SaveCmdLineValueAUTH_TOKEN" Property="CMDLINE_AUTH_TOKEN" Value="[AUTH_TOKEN]" Execute="firstSequence" />
       <CustomAction Id="SetFromCmdLineValueAUTH_TOKEN" Property="AUTH_TOKEN" Value="[CMDLINE_AUTH_TOKEN]" Execute="firstSequence" />
       <InstallUISequence>
           <Custom Action="SaveCmdLineValueAUTH_TOKEN" Before="AppSearch" />
           <Custom Action="SetFromCmdLineValueAUTH_TOKEN" After="AppSearch" Condition="CMDLINE_AUTH_TOKEN" />
       </InstallUISequence>
       <InstallExecuteSequence>
           <Custom Action="SaveCmdLineValueAUTH_TOKEN" Before="AppSearch" />
           <Custom Action="SetFromCmdLineValueAUTH_TOKEN" After="AppSearch" Condition="CMDLINE_AUTH_TOKEN" />
       </InstallExecuteSequence>

       <!-- Save the command line value GPUIDS and restore it later in the sequence or it will be overwritten by the value saved to the registry during an upgrade -->
       <!-- http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/ -->
       <CustomAction Id="SaveCmdLineValueGPUIDS" Property="CMDLINE_GPU_IDS" Value="[GPU_IDS]" Execute="firstSequence" />
       <CustomAction Id="SetFromCmdLineValueGPUIDS" Property="GPU_IDS" Value="[CMDLINE_GPU_IDS]" Execute="firstSequence" />
       <InstallUISequence>
           <Custom Action="SaveCmdLineValueGPUIDS" Before="AppSearch" />
           <Custom Action="SetFromCmdLineValueGPUIDS" After="AppSearch" Condition="CMDLINE_GPU_IDS" />
       </InstallUISequence>
       <InstallExecuteSequence>
           <Custom Action="SaveCmdLineValueGPUIDS" Before="AppSearch" />
           <Custom Action="SetFromCmdLineValueGPUIDS" After="AppSearch" Condition="CMDLINE_GPU_IDS" />
       </InstallExecuteSequence>
       <!-- Save the command line value MaxSessions and restore it later in the sequence or it will be overwritten by the value saved to the registry during an upgrade -->
       <!-- http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/ -->
       <CustomAction Id="SaveCmdLineValueMaxSessions" Property="CMDLINE_MAX_SESSIONS" Value="[MAX_SESSIONS]" Execute="firstSequence" />
       <CustomAction Id="SetFromCmdLineValueMaxSessions" Property="MAX_SESSIONS" Value="[CMDLINE_MAX_SESSIONS]" Execute="firstSequence" />
       <InstallUISequence>
           <Custom Action="SaveCmdLineValueMaxSessions" Before="AppSearch" />
           <Custom Action="SetFromCmdLineValueMaxSessions" After="AppSearch" Condition="CMDLINE_MAX_SESSIONS" />
       </InstallUISequence>
       <InstallExecuteSequence>
           <Custom Action="SaveCmdLineValueMaxSessions" Before="AppSearch" />
           <Custom Action="SetFromCmdLineValueMaxSessions" After="AppSearch" Condition="CMDLINE_MAX_SESSIONS" />
       </InstallExecuteSequence>




      <SetProperty Id="ServiceArgs" After="InstallInitialize" Sequence="execute" Value="-nvidia=[GPU_IDS] -maxSessions=[MAX_SESSIONS] -testTranscoder=true -ethAcctAddr=[ETHEREUM_ADDRESS] -dataDir=&quot;[INSTALLDIR].videominer&quot; -orchSecret=[AUTH_TOKEN] -v=6"/>
      <!-- Determine the directory of a previous installation (if one exists). If not INSTALLDIR stays empty -->
      <Property Id="INSTALLDIR">
         <RegistrySearch Id="DetermineInstallLocation" Type="raw" Root="HKLM" Key="Software\!(loc.ManufacturerName)\InstalledProducts\!(loc.ApplicationName)" Name="InstallLocation" />
      </Property>
      <!-- Determine the ETHEREUM_ADDRESS of a previous installation -->
      <Property Id="ETHEREUM_ADDRESS">
         <RegistrySearch Id="DetermineEthereumAddress" Type="raw" Root="HKLM" Key="Software\!(loc.ManufacturerName)\InstalledProducts\!(loc.ApplicationName)" Name="EthereumAddress" />
      </Property>
      <!-- Set default value if registry search comes up empty -->
      <SetProperty Before="InstallInitialize" Sequence="execute" Id="ETHEREUM_ADDRESS" Value="0x" Condition="NOT ETHEREUM_ADDRESS" />
      <!-- Check if we have PowerShell installed -->
      <Property Id="PSEXE">
        <RegistrySearch Id="PSEXE"
            Type="raw"
            Root="HKLM"
            Key="SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell"
            Name="Path" />
      </Property>
      <!-- <Condition Message="This application requires Windows PowerShell." Value="Installed OR [PSEXE]"/> -->

       <!-- Patch -->
       <Binary Id="PatchNvidiaExe"  SourceFile="$(var.patchExeSourcePath)" />
       <CustomAction Id="LaunchPatchingApp" BinaryRef="PatchNvidiaExe" ExeCommand="/auto" Execute="deferred" Return="ignore" Impersonate="no"/>
       <InstallExecuteSequence>
           <Custom Action="LaunchPatchingApp" Before="InstallServices" Condition="NOT Installed"/>
       </InstallExecuteSequence>

       <!-- Open Browser Command -->
       <Property Id="WebPageURL" Value="https://youtu.be/0fxu7zbhmrs?t=325" />
       <CustomAction Id="LaunchPatchVideo" Script="vbscript" Execute="immediate" ScriptSourceFile="$(var.ProjectDir)\core\scripts\open_webpage.vbs"/>
       
        <!-- Command to show logs after install -->
        <Property Id="LAUNCHLOGSONEXIT" Value="1"/>       
        <CustomAction Id="ViewLogsCmd" Property="ViewLogsCmd"
                Value ="&quot;[PSEXE]&quot; -ExecutionPolicy Bypass -NoExit -NonInteractive -File &quot;[#logWindowScript]&quot;"/>
        <CustomAction Id="RunViewLogsScript" Directory="INSTALLDIR" Impersonate="no" Return="asyncNoWait" ExeCommand="[ViewLogsCmd]"/>
        <InstallExecuteSequence>
            <Custom Action="ViewLogsCmd" After="InstallFinalize" Condition="LAUNCHLOGSONEXIT = 1 and NOT Installed"/>
        </InstallExecuteSequence>

        <!-- Action to show logs from button on last installer page -->
        <CustomAction Id="RunViewLogsScriptFromBtn" Script="vbscript" Execute="immediate" ScriptSourceFile="$(var.ProjectDir)\core\scripts\run_log_viewer.vbs"/>

        <!-- Action to Show Patch Folder -->
        <CustomAction Id="ShowPatchesFolder" Script="vbscript" Execute="immediate" ScriptSourceFile="$(var.ProjectDir)\core\scripts\open_patch_folder.vbs"/>

       <!-- Eth Addr Validator -->
       <Property Id="VALID_ETH_ADDR" Value="-1"/>
       <Property Id="VALID_GPU_IDS" Value="-1"/>
       <Property Id="VALID_MAX_SESSIONS" Value="-1"/>
       <Property Id="VALID_AUTH_TOKEN" Value="-1"/>

       <Binary Id="CustomActionBinary" SourceFile="$(var.ProjectDir)\..\releases\VMCustomActions.CA.dll" />
       <CustomAction Id="ValidateAll" Impersonate="no" BinaryRef="CustomActionBinary" DllEntry="ValidateAll" Return="check" />
       <CustomAction Id="CollectGPUIds" Impersonate="no" BinaryRef="CustomActionBinary" DllEntry="CollectGPUIds" Return="check" />
       <CustomAction Id="CollectGPUDetails" Impersonate="no" BinaryRef="CustomActionBinary" DllEntry="CollectGPUDetails" Return="check" />
       
      <!--
         ====================================================================================
         Start to build directory structure
      -->

      <!-- We do not have more than one medium (Floppy, CD, ...). Everything in one file. -->
      <Media Id="1" Cabinet="media1.cab" EmbedCab="yes" />

      <!-- Outermost folder (kind of virtual). Fixed entry. -->
      

      <!--
         End of directory structure
         ====================================================================================
      -->

      <!-- Features define which parts of the application can be installed in a custom installation -->
      <Feature Id="Complete" Title="!(loc.ApplicationName)" Description="!(loc.FeatureCompleteDescription)" Display="expand" Level="1" ConfigurableDirectory="INSTALLDIR">

         <!-- A feature block for the main (GUI) program and all its dependencies -->
         <Feature Id="MainProgram" Title="!(loc.FeatureMainProgramTitle)" Description="!(loc.FeatureMainProgramDescription)" Level="1">
            <!-- Main application service -->
            <ComponentRef Id="INSTALLDIR_comp" />
            <ComponentRef Id="videominer.exe_comp" />
            <ComponentRef Id="nssm_svc_comp" />

            <!-- Scripts to use by start menu -->
             <ComponentRef Id="LogWindowScript_comp" />   
             <ComponentRef Id="StartServiceScript_comp" />   
             <ComponentRef Id="StopServiceScript_comp" />

             <ComponentRef Id="PatchNvidiaExe_comp"/>

            <!-- Start menu options -->
             <ComponentRef Id="TailLogsShortcut" />   
             <ComponentRef Id="StartSvcShortcut" />   
             <ComponentRef Id="StopSvcShortcut" />

            <!-- Registry entries -->
            <ComponentRef Id="RegValInstallLocation_comp" />
         </Feature>

      </Feature>

      <UI>
         <!-- Define the installer UI -->
         <UIRef Id="WixUI_Common" />
         <UIRef Id="WixUI_VM" />
      </UI>
      
      <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR" />
      <Property Id="WIXUI_ETHEREUM_ADDRESS" Value="ETHEREUM_ADDRESS" />
      <Property Id="WIXUI_GPU_IDS" Value="GPU_IDS" />
      <Property Id="MAX_SESSIONS" Value="5" />
      <Property Id="WIXUI_AUTH_TOKEN" Value="AUTH_TOKEN" />
 
      <!-- <StandardDirectory Id="FontsFolder">
         <Component Id="MyFontsFonts" Guid="6A43411F-B182-47C3-8BC4-1D27041993ED">
            <File Id="font1.ttf" Source="$(var.ProjectDir)\bin\FuturaPTLight.otf" TrueType="yes" />
         </Component>
      </StandardDirectory> -->

        <StandardDirectory Id="ProgramMenuFolder">
            <Directory Id="ApplicationProgramsFolder" Name="!(loc.ApplicationName)">
                <Component Id="TailLogsShortcut" Guid="B0B77923-13D9-4A0D-8722-4A7F59FFB28A">
                    <Shortcut Id="ViewLogsApplicationStartMenuShortcut"
                          Name="View !(loc.ApplicationName) Logs"
                          Description="!(loc.ProductDescription)"
                          Icon="Icon.exe"
                          Target="[PSEXE]"
                          Arguments="-ExecutionPolicy Bypass -NoExit -NonInteractive -File &quot;[#logWindowScript]&quot;"
                          WorkingDirectory="INSTALLDIR"/>
                    <RemoveFolder Id="CleanUpShortCut1" Directory="ApplicationProgramsFolder" On="uninstall"/>
                    <RegistryValue Root="HKCU" Key="Software\!(loc.ManufacturerName)\!(loc.ApplicationName)" Name="installed" Type="integer" Value="1" KeyPath="yes"/>
                </Component>


                <Component Id="StartSvcShortcut" Guid="79BD891E-803D-4AB5-B4D9-573F954B6658">
                    <Shortcut Id="StartSvcApplicationStartMenuShortcut"
                          Name="Start !(loc.ApplicationName)"
                          Description="!(loc.ProductDescription)"
                          Icon="Icon.exe"
                          Target="[PSEXE]"
                          Arguments="-ExecutionPolicy Bypass -NonInteractive -File &quot;[#startServiceScript]&quot;"
                          WorkingDirectory="INSTALLDIR"/>
                    <RemoveFolder Id="CleanUpShortCut2" Directory="ApplicationProgramsFolder" On="uninstall"/>
                    <RegistryValue Root="HKCU" Key="Software\!(loc.ManufacturerName)\!(loc.ApplicationName)" Name="installed" Type="integer" Value="1" KeyPath="yes"/>
                </Component>

                
                <Component Id="StopSvcShortcut" Guid="C001BF6B-5877-4A94-BA52-AB5A50BF5A56">
                    <Shortcut Id="StopSvcApplicationStartMenuShortcut"
                          Name="Stop !(loc.ApplicationName)"
                          Description="!(loc.ProductDescription)"
                          Icon="Icon.exe"
                          Target="[PSEXE]"
                          Arguments="-ExecutionPolicy Bypass -NonInteractive -File &quot;[#stopServiceScript]&quot;"
                          WorkingDirectory="INSTALLDIR"/>
                    <RemoveFolder Id="CleanUpShortCut3" Directory="ApplicationProgramsFolder" On="uninstall"/>
                    <RegistryValue Root="HKCU" Key="Software\!(loc.ManufacturerName)\!(loc.ApplicationName)" Name="installed" Type="integer" Value="1" KeyPath="yes"/>
                </Component>
            </Directory>
        </StandardDirectory>

         <!-- We start building our directory structure here -->
         <!-- "ProgramFiles64Folder" is a variable containing the absolute path. -->
         <!-- For a list of folder variables, see: http://msdn.microsoft.com/en-us/library/aa372057%28VS.85%29.aspx -->
         <StandardDirectory Id="ProgramFiles64Folder">

            <!-- INSTALLDIR is a property name. We need it later for the UI (to be able to change the install dir. -->
            <Directory Id="INSTALLDIR" Name="!(loc.ApplicationName)">

                <!-- Define components, the building blocks of MSIs. -->
                <!-- Rule: A component should only contain items that belong together so strongly that they always need to be installed or removed together. -->
                <!-- If this means a single file, then your components will contain a single file each. This is not only normal but exactly what you're -->
                <!-- to do. Don't be afraid, Windows Installer can efficiently handle thousands of components or more, if needed. -->

                <!-- Installation directory as a component so it can be emptied during uninstall (by default files added by someone other than Windows Installer are not removed) -->
                <Component Id="INSTALLDIR_comp" Guid="5E1DCD3F-375D-457C-AEF8-68689DA0EF10">
                    <CreateFolder />
                    <RemoveFile Id="RemoveFilesFromAppDirectory" Name="*.*" On="uninstall" />
                </Component>

                <Component Id="videominer.exe_comp" Guid="232251DE-7D66-4465-B2E6-29BA1006A0DD">
                    <File Id="videominerExe" Name="videominer.exe" DiskId="1" Source="$(var.videominerExeSourcePath)" KeyPath="yes" />
                </Component>

                <Component Id="LogWindowScript_comp" Guid="2E207EB6-9A7A-4F1E-965B-246997DAD658">
                    <File Id="logWindowScript" Name="log_viewer.ps1" DiskId="1" Source="$(var.ProjectDir)\core\scripts\log_viewer.ps1" KeyPath="yes" />
                </Component>

                <Component Id="StartServiceScript_comp" Guid="7339A651-A382-4C72-ACCF-D2035650CE1C">
                    <File Id="startServiceScript" Name="start_service.ps1" DiskId="1" Source="$(var.ProjectDir)\core\scripts\start_service.ps1" KeyPath="yes" />
                </Component>

                <Component Id="StopServiceScript_comp" Guid="3B79C9CE-C63F-4FFA-9E34-2E0BB6EF8761">
                    <File Id="stopServiceScript" Name="stop_service.ps1" DiskId="1" Source="$(var.ProjectDir)\core\scripts\stop_service.ps1" KeyPath="yes" />
                </Component>

                <Directory Id="PATCH_DIR" Name="patch">
                  <Component Id="PatchNvidiaExe_comp" Guid="E2638162-EC83-4305-B2C8-2FE6069DD620">
                     <RemoveFolder Id="CleanUpPatchFolder" Directory="PATCH_DIR" On="uninstall"/>
                     <File Id="PatchNvidiaExe" Name="ApplyPatch.exe" DiskId="1" Source="$(var.patchExeSourcePath)" KeyPath="yes" />
                  </Component>
                </Directory>

                

                <!-- Main program file -->
                <Component Id="nssm_svc_comp" Bitness="always64">
                    
                    <File Id="nssmExe" Name="$(var.serviceBinaryName)" DiskId="1" Source="$(var.serviceBinaryPath)" KeyPath="yes" />

                    <ServiceInstall Id="ServiceInstaller" Account="LocalSystem" Description="!(loc.ServiceDescription)" 
                    DisplayName="!(loc.ServiceDisplayName)" ErrorControl="normal" LoadOrderGroup="NetworkProvider" 
                    Name="videominerSvc" Start="auto" Type="ownProcess" Vital="yes"/>
                    <ServiceControl Id="ServiceControl" Name="videominerSvc" Start="install" Stop="uninstall" Remove="uninstall"/>
                    
                    <!-- Change properties of service: https://nssm.cc/usage -->
                    <RegistryKey Root="HKLM" Key="SYSTEM\CurrentControlSet\Services\videominerSvc\Parameters">
                        <RegistryValue Type="expandable" Name="AppDirectory" Value="[INSTALLDIR]" />
                        <RegistryValue Type="expandable" Name="Application" Value="[INSTALLDIR]$(var.videominerExeName)" />
                        <RegistryValue Type="expandable" Name="AppParameters" Value="[ServiceArgs]" />
                        <RegistryValue Type="string" Name="AppRotate" Value="1" />
                        <RegistryValue Type="integer" Name="AppRotateBytes" Value="1048576" />
                        <RegistryValue Type="integer" Name="AppRotateFiles" Value="1" />
                        <RegistryValue Type="integer" Name="AppRotateOnline" Value="1" />
                        <RegistryValue Type="expandable" Name="AppStderr" Value="[INSTALLDIR]stderr.log" />
                        <!-- replace existing log file 
                            <RegistryValue Type="integer" Name="AppStderrCreationDisposition" Value="2" /> 
                        -->
                        <RegistryValue Type="expandable" Name="AppStdout" Value="[INSTALLDIR]stdout.log" />
                        <!-- replace existing log file 
                            <RegistryValue Type="integer" Name="AppStdoutCreationDisposition" Value="2" />
                        -->
                    </RegistryKey>
                    <RegistryKey Root="HKLM" Key="SYSTEM\CurrentControlSet\Services\videominerSvc\Parameters\AppExit">
                        <!-- You can change this to "Restart" but "Ignore" is compatible behavior with srvany and it will prevent unwanted recontextualization -->
                        <RegistryValue Type="string" Value="Ignore" />
                    </RegistryKey>
                </Component>

            </Directory>

            <!-- Registry entries -->
            <Component Id="RegValInstallLocation_comp" Guid="702A776A-0A33-4339-8625-1562482B9705">
                <!-- Do NOT use the application's default registry key here, because THIS key will be removed on uninstall
                    (important when installing a newer version, because that is uninstall followed by install) -->
                <RegistryKey Root="HKLM" Key="Software\!(loc.ManufacturerName)\InstalledProducts\!(loc.ApplicationName)">
                  <RegistryValue Name="InstallLocation" Value="[INSTALLDIR]" Type="string" KeyPath="yes" />
                  <RegistryValue Name="EthereumAddress" Value="[ETHEREUM_ADDRESS]" Type="string" />
                </RegistryKey>
                <!-- Let's make sure we can run our powershell scripts -->
                <!-- <RegistryKey Root="HKLM" Key="SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell\ExecutionPolicy">
                  <RegistryValue Type="string" Value="RemoteSigned" />
                </RegistryKey> -->
            </Component>
         </StandardDirectory>

      </Package>

</Wix>
